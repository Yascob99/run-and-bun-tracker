Map = {
	grid = {},
	file = '',
	banks = {},
	bankLengths = {},
	details = {},
	names = {},
	layoutAddresses = {},
	regionDict = {},
}

Map.file = 'hoenn'
Map.grid = {
	{0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0x1D, 0x1D, 0x04, 0x1C, 0x1C, 0x1C, 0x1C, 0x1A, 0xC5, 0xC5, 0x22, 0x0B, 0x23, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0x1D, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x1A, 0xC5, 0xC5, 0x22, 0xC5, 0x23, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x1E, 0x1D, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x1A, 0xC5, 0xC5, 0x22, 0xC5, 0x23, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x1E, 0xC5, 0xC5, 0xC5, 0xC5, 0x03, 0x1B, 0x1B, 0x1A, 0xC5, 0xC5, 0x22, 0xC5, 0x23, 0x24, 0x24, 0x24, 0x24, 0x0C, 0x0C, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x1E, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x1A, 0xC5, 0xC5, 0x22, 0xC5, 0xC5, 0xC5, 0xC5, 0x25, 0xC5, 0xC5, 0xC5, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x0A, 0x1F, 0x1F, 0x1F, 0x1F, 0xC5, 0xC5, 0xC5, 0x1A, 0xC5, 0xC5, 0x22, 0xC5, 0xC5, 0xC5, 0xC5, 0x25, 0xC5, 0xC5, 0xC5, 0x27, 0x27, 0x27, 0x27, 0x0D, 0x0D, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x0A, 0xC5, 0xC5, 0xC5, 0x05, 0x20, 0x20, 0x20, 0x09, 0x09, 0x21, 0x21, 0x26, 0x26, 0x26, 0x26, 0x26, 0xC5, 0xC5, 0xC5, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x13, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x19, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x29, 0x0E, 0x29, 0x2A, 0x2A, 0x2A, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x13, 0xC5, 0xC5, 0xC5, 0x12, 0x12, 0x12, 0x12, 0x19, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0xC5, 0x0F, 0xC5},
	{0xC5, 0x13, 0x07, 0x11, 0x11, 0x01, 0xC5, 0xC5, 0xC5, 0x19, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x2B, 0x2B, 0x2B, 0x2B, 0x0F, 0xC5},
	{0xC5, 0x14, 0xC5, 0xC5, 0xC5, 0x10, 0xC5, 0xC5, 0xC5, 0x08, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x06, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x14, 0xC5, 0xC5, 0xC5, 0x00, 0xC5, 0xC5, 0xC5, 0x08, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x14, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x18, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x3A, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x15, 0x15, 0x15, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x18, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0xC5, 0x02, 0x16, 0x16, 0x16, 0x17, 0x17, 0x18, 0xC5, 0xC5, 0xC5, 0x49, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5}
}

function Map.findCoords(regionid)
	local x = 0
	local y = 0
	local count = 0
	for i = 1, #Map.grid, 1 do
		for j = 1, #Map.grid[i], 1 do
			if regionid == Map.grid[i][j] then
				count = count + 1
				x = x + j
				y = y + i
			end
		end
	end
	if count == 0 then
		return {-10, -10}
	else
		return {x/count, y/count}
	end
end

function Map.initialize()
	local mapPath = FileManager.Folders.Data .. FileManager.slash .. "MapData.txt"
	local mapDetailsPath = FileManager.Folders.Data .. FileManager.slash .. "MapDetails.txt"
	if FileManager.fileExists(mapPath) then
		local data = FileManager.readTableFromFile(mapPath) or {{}, {}, 0, {}}
		Map.banks, Map.regionDict, Map.numMaps, Map.bankLengths = table.unpack(data)
	else
		console.log("Gathering Map Data")
		Map.populateMapData()
		FileManager.writeTableToFile(table.pack(Map.banks, Map.regionDict, Map.numMaps, Map.bankLengths), mapPath)
	end
	if FileManager.fileExists(mapDetailsPath) then
		local data = FileManager.readTableFromFile(mapDetailsPath) or {{}, {}}
		Map.names, Map.details = table.unpack(data)
	else
		console.log("Gathering Map Details")
		Map.populateMapDetails()
		FileManager.writeTableToFile(table.pack(Map.names, Map.details), mapDetailsPath)
	end
end

function Map.isValidMapLocation()
	return Battle.mapId ~= nil and Battle.mapId ~= 0
end

function Map.processMapBank(pointer, BankLength, index)
	Map.banks[index] = {}
	local mapAddress = nil
	local layoutID
	local regionID
	for i = 1, BankLength, 1 do
		mapAddress = Memory.readdword(pointer + (i -1) *4)
		layoutID = Memory.readword(mapAddress + 18)
		regionID = Memory.readbyte(mapAddress + 20)
		Map.banks[index][i] = {
			layoutAddress = Memory.readdword(mapAddress),
			scriptDataAdress = Memory.readdword(mapAddress + 4),
			mapScripts = Memory.readdword(mapAddress + 8),
			connectionAddress = Memory.readdword(mapAddress + 12),
			musicID = Memory.readword(mapAddress + 16),
			layoutID = layoutID,
			regionID = regionID,
			cave = Memory.readbyte(mapAddress + 21),
			weather = Memory.readbyte(mapAddress + 22),
			mapType = Memory.readbyte(mapAddress + 23),
			-- 2 bytes of unused space
			mapFlags = Memory.readbyte(mapAddress + 26),
			battleType = Memory.readbyte(mapAddress + 27)
		}

		-- Maps the layoutID to a region for quicker lookup purposes
		Map.regionDict[layoutID] = regionID + 1
	end
end

function Map.populateMapData()
	local mapBanklength = 34
	local mapBankAddress = GameSettings.mapbankAddress
	local mapBankPointer = mapBankAddress
	local mapBankEnd = mapBankAddress + 4
	local length
	local entries = 0
	-- Run this to get all of the map banks except for the last.
	for i = 1, mapBanklength - 1, 1 do
		mapBankPointer = Memory.readdword(mapBankAddress + (i - 1) * 4)
		mapBankEnd = Memory.readdword(mapBankAddress + (i) * 4)
		length = (mapBankEnd - mapBankPointer)/4
		Map.processMapBank(mapBankPointer, length, i)
		entries = entries + length
		Map.bankLengths[i] = length
	end
	-- The last bank ends at the start of the mapBankPointer
	length = (mapBankAddress - mapBankEnd)/4
	Map.processMapBank(mapBankEnd, length, mapBanklength)
	Map.numMaps = entries + length
	Map.bankLengths[mapBanklength] = length
end

function Map.populateMapDetails()
	local mapDetailsAddress = GameSettings.mapDetailsAddress
	local mapDetailslength = 213
	local length
	local name
	local mapNameAddress
	local nextMapNameAddress = nil
	for i = 1, mapDetailslength, 1 do
		if i == mapDetailslength then
			mapNameAddress = nextMapNameAddress
			nextMapNameAddress = GameSettings.specialMapNames
		else
			mapNameAddress = Memory.readdword(mapDetailsAddress + 4 + (i -1) * 8) 
			nextMapNameAddress = Memory.readdword(mapDetailsAddress + 4 + (i) * 8) 
		end
		length = nextMapNameAddress - mapNameAddress - 1
		name = Utils.toString(mapNameAddress, length)
		table.insert(Map.names, name)
		Map.details[name] = {
			x = Memory.readbyte(mapDetailsAddress + (i -1) * 8),
			y = Memory.readbyte(mapDetailsAddress + 1 + (i - 1) * 8),
			width = Memory.readbyte(mapDetailsAddress + 2 + (i - 1) * 8),
			height = Memory.readbyte(mapDetailsAddress + 3 + (i -1 ) * 8),
		}
	end
end