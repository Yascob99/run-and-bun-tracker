Map = {
	grid = {},
	file = ''
}

Map.file = 'hoenn'
Map.grid = {
	{0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0x1D, 0x1D, 0x04, 0x1C, 0x1C, 0x1C, 0x1C, 0x1A, 0xC5, 0xC5, 0x22, 0x0B, 0x23, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0x1D, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x1A, 0xC5, 0xC5, 0x22, 0xC5, 0x23, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x1E, 0x1D, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x1A, 0xC5, 0xC5, 0x22, 0xC5, 0x23, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x1E, 0xC5, 0xC5, 0xC5, 0xC5, 0x03, 0x1B, 0x1B, 0x1A, 0xC5, 0xC5, 0x22, 0xC5, 0x23, 0x24, 0x24, 0x24, 0x24, 0x0C, 0x0C, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x1E, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x1A, 0xC5, 0xC5, 0x22, 0xC5, 0xC5, 0xC5, 0xC5, 0x25, 0xC5, 0xC5, 0xC5, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x0A, 0x1F, 0x1F, 0x1F, 0x1F, 0xC5, 0xC5, 0xC5, 0x1A, 0xC5, 0xC5, 0x22, 0xC5, 0xC5, 0xC5, 0xC5, 0x25, 0xC5, 0xC5, 0xC5, 0x27, 0x27, 0x27, 0x27, 0x0D, 0x0D, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x0A, 0xC5, 0xC5, 0xC5, 0x05, 0x20, 0x20, 0x20, 0x09, 0x09, 0x21, 0x21, 0x26, 0x26, 0x26, 0x26, 0x26, 0xC5, 0xC5, 0xC5, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x13, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x19, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x29, 0x0E, 0x29, 0x2A, 0x2A, 0x2A, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x13, 0xC5, 0xC5, 0xC5, 0x12, 0x12, 0x12, 0x12, 0x19, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0xC5, 0x0F, 0xC5},
	{0xC5, 0x13, 0x07, 0x11, 0x11, 0x01, 0xC5, 0xC5, 0xC5, 0x19, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x2B, 0x2B, 0x2B, 0x2B, 0x0F, 0xC5},
	{0xC5, 0x14, 0xC5, 0xC5, 0xC5, 0x10, 0xC5, 0xC5, 0xC5, 0x08, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x06, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x14, 0xC5, 0xC5, 0xC5, 0x00, 0xC5, 0xC5, 0xC5, 0x08, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x14, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x18, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x3A, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0x15, 0x15, 0x15, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x18, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0xC5, 0x02, 0x16, 0x16, 0x16, 0x17, 0x17, 0x18, 0xC5, 0xC5, 0xC5, 0x49, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5},
	{0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5}
}

function Map.findCoords(mapid)
	local x = 0
	local y = 0
	local count = 0
	for i = 1, #Map.grid, 1 do
		for j = 1, #Map.grid[i], 1 do
			if mapid == Map.grid[i][j] then
				count = count + 1
				x = x + j
				y = y + i
			end
		end
	end
	if count == 0 then
		return {-10, -10}
	else
		return {x/count, y/count}
	end
end